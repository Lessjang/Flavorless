//file:noinspection GroovyAssignabilityCheck
plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/releases'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		name = "Gegy"
		url = "https://maven.gegy.dev"
	}
	maven {
		name 'JitPack'
		url 'https://jitpack.io'
		content {
			includeGroup 'supercoder79'
		}
	}
}

loom {
	accessWidenerPath.set file("src/main/resources/generated.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"

	// Remove DataFixers
	include modRuntime("supercoder79:databreaker:${databreaker_version}") {
		exclude module: "fabric-loader"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding "UTF-8"
	it.options.release.set 16
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}


class WidenerSpec {
	String keyword = "mutable"
	String className
	String descriptor

	WidenerSpec(String keyword, String name, String descriptor) {
		this.keyword = keyword
		this.className = name
		this.descriptor = descriptor
	}

	@Override
	int hashCode() {
		int result = keyword.hashCode()
		result *= 31
		result += className.hashCode()
		result *= 31
		result += descriptor.hashCode()
		return result
	}
}

static WidenerSpec mutable(String className, String descriptor) {
	return new WidenerSpec("mutable", className, descriptor)
}

List<String> expandWideners(List<WidenerSpec> wideners) {
	Set<String> classNames = new HashSet<>()
	for(WidenerSpec widener : wideners) classNames.add(widener.className)

	File mappingsJar = configurations.mappingsFinal.find { true }
	File mappingsFile = new File(mappingsJar.parentFile, "mappings/"+mappingsJar.getName().replace("-final.jar", ".tiny"))

	String curClass = "java/lang/Void"
	List<String> result = new ArrayList<>()

	mappingsFile.eachLine {
		if (it.startsWith('c\t')) {
			def parts = it.split('\t')
			curClass = parts[3]
		} else if (it.trim().startsWith('f\t')) {
			if (classNames.contains(curClass)) {

				def parts = it.trim().split('\t')
				def fieldName = parts[4]

				for(WidenerSpec widener : wideners) {
					if (widener.className.equals(curClass)) {
						result.add(widener.keyword+"\tfield\t"+widener.className+"\t"+fieldName+"\t"+widener.descriptor)
					}
				}

				/*
				//if (curClass.equals(className)) {
					def parts = it.trim().split('\t');
					def fieldName = parts[4];

					//println blockName;
					curFields.add(fieldName);
				}*/
			}
		}
	}

	return result
}

/**
 * Given a map of binary class names to field lists, such as the one returned by getAllFields, generate an accesswidener
 * file called generated.accesswidener which forces each field specified to be mutable (non-final).
 */
void writeAccessWidener(List<String> wideners) {
	def widenerFile = new File(project.projectDir, "src/main/resources/generated.accesswidener")

	def writer = new FileWriter(widenerFile)

	writer.println("accessWidener\tv1\tnamed")
	for(String s : wideners) {
		writer.println(s)
	}

	writer.flush()
	writer.close()
}


tasks.register("accesswidener") {
	doLast {
		def allAWs = expandWideners([
				mutable("net/minecraft/block/Blocks", "Lnet/minecraft/block/Block;"),
				mutable("net/minecraft/item/Items", "Lnet/minecraft/item/Item;"),
				mutable("net/minecraft/world/gen/surfacebuilder/SurfaceBuilder", "Lnet/minecraft/world/gen/surfacebuilder/SurfaceBuilder;"),
				mutable("net/minecraft/world/gen/surfacebuilder/ConfiguredSurfaceBuilders", "Lnet/minecraft/world/gen/surfacebuilder/ConfiguredSurfaceBuilder")
			])

		writeAccessWidener(allAWs)
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
	}
}
